/*
 * Generated by the Mule project wizard. http://mule.mulesource.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.transport.comm;

import org.mule.transport.tcp.SimpleServerSocketFactory;
import org.mule.util.StringUtils;

import javax.comm.*;
import java.net.ServerSocket;
import java.net.URI;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.io.IOException;
import java.util.Enumeration;

/**
 * Created by IntelliJ IDEA.
 * User: Christopher Cheng
 * Date: Mar 1, 2009
 * Time: 2:52:43 PM
 * To change this template use File | Settings | File Templates.
 */
public class CommServerPortFactory implements SimpleServerPortFactory
{

    public CommPort createServerSocket(URI uri, int backlog, Boolean reuse) throws IOException
    {
        String host = StringUtils.defaultIfEmpty(uri.getHost(), "localhost");
        InetAddress inetAddress = InetAddress.getByName(host);

        if (inetAddress.equals(InetAddress.getLocalHost())
                || inetAddress.isLoopbackAddress()
                || host.trim().equals("localhost"))
        {
            return null;
//            return createServerPort(uri.getPort(), backlog, reuse);
        }
        else
        {
//            return createServerPort(inetAddress, uri.getPort(), backlog, reuse);
            return null;
        }
    }

    public CommPort createCommPort(URI uri, int backlog, Boolean reuse) throws IOException {
        return null;
    }

    /*
    public CommPort createServerSocket(String port, int backlog, Boolean reuse) throws IOException
    {
        return configure(new ServerSocket(), reuse, new InetSocketAddress(address, port), backlog);
    }

    public CommPort createServerSocket(int port, int backlog, Boolean reuse) throws IOException
    {
        return configure(new ServerSocket(), reuse, new InetSocketAddress(port), backlog);
    }
    */
    

//    public CommPort createServerPort(URI uri, int backlog, Boolean reuse) throws IOException
//    {
//        String host = StringUtils.defaultIfEmpty(uri.getHost(), "localhost");
//        InetAddress inetAddress = InetAddress.getByName(host);
//
//        if (inetAddress.equals(InetAddress.getLocalHost())
//                || inetAddress.isLoopbackAddress()
//                || host.trim().equals("localhost"))
//        {
//            return createCommPort(uri.getPort(), backlog, reuse);
//        }
//        else
//        {
//            return createCommPort(inetAddress, uri.getPort(), backlog, reuse);
//        }
//    }

    public CommPort createCommPort(String portNumber, int baudrate, int dataBits, int stopBits, int parity, int delay, Boolean backlog, Boolean reuse)
            throws NoSuchPortException, PortInUseException, UnsupportedCommOperationException
    {
        String portName = "";
        Enumeration e = CommPortIdentifier.getPortIdentifiers();
        while (e.hasMoreElements()) {
            CommPortIdentifier commPortIdentifier = (CommPortIdentifier) e.nextElement();
            if (commPortIdentifier.getName().equals("COM" + portNumber)) {
                portName = "COM" + portNumber;
            }
            else if (commPortIdentifier.getName().equals("ttyS" + portNumber)) {
                portName = "ttyS" + portNumber;
            }
        }

        CommPortIdentifier com = CommPortIdentifier.getPortIdentifier(portName);
        SerialPort serialPort = (SerialPort) com.open(portName, delay);
        serialPort.setSerialPortParams(baudrate, dataBits, stopBits, parity);
        CommConnector.getPortsMap().put(portName, serialPort);
        System.out.println("put " + portName + " into the map");

        return serialPort;
    }

    public CommPort createCommPort(String portNumber, int backlog, Boolean reuse)
            throws NoSuchPortException, PortInUseException, UnsupportedCommOperationException
    {
        String portName = "";
        Enumeration e = CommPortIdentifier.getPortIdentifiers();
        while (e.hasMoreElements()) {
            CommPortIdentifier commPortIdentifier = (CommPortIdentifier) e.nextElement();
            if (commPortIdentifier.getName().equals("COM" + portNumber)) {
                portName = "COM" + portNumber;
            }
            else if (commPortIdentifier.getName().equals("ttyS" + portNumber)) {
                portName = "ttyS" + portNumber;
            }
        }

        SerialPort serialPort = (SerialPort) CommConnector.getPortsMap().get(portName);
        if (serialPort == null) {
            CommPortIdentifier com = CommPortIdentifier.getPortIdentifier(portName);
            int delay = 150;
            serialPort = (SerialPort) com.open(portName, delay);
            CommConnector.getPortsMap().put(portName, serialPort);
            System.out.println("put " + portName + " into the map");
            int baudrate = 9600;
            int dataBits = SerialPort.DATABITS_8;
            int stopBits = SerialPort.STOPBITS_1;
            int parity = SerialPort.PARITY_NONE;
            serialPort.setSerialPortParams(baudrate, dataBits, stopBits, parity);
        }

        return serialPort;
    }

    protected CommPort configure(CommPort commPort, Boolean reuse, String portName, int backlog)
            throws IOException
    {
//        if (null != reuse && reuse.booleanValue() != port.getReuseAddress())
//        {
//            port.setReuseAddress(reuse.booleanValue());
//        }
        // bind *after* setting so_reuseaddress
//        port.bind(address, backlog);
        return commPort;
    }

}