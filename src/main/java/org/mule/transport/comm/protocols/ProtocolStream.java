/*
 * Generated by the Mule project wizard. http://mule.mulesource.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.transport.comm.protocols;

import org.mule.util.ClassUtils;
import org.mule.transport.comm.CommProtocol;

import java.io.OutputStream;
import java.io.IOException;

/**
 * Created by IntelliJ IDEA.
 * User: Christopher Cheng
 * Date: Mar 1, 2009
 * Time: 3:17:04 PM
 * To change this template use File | Settings | File Templates.
 */
public class ProtocolStream extends OutputStream
{

    private boolean streamOk;
    private CommProtocol protocol;
    private OutputStream os;

    public ProtocolStream(CommProtocol protocol, boolean streamOk, OutputStream os)
    {
        this.protocol = protocol;
        this.streamOk = streamOk;
        this.os = os;
    }

    private void assertStreamOk()
    {
        if (!streamOk)
        {
             throw new IllegalArgumentException("Comm protocol " + ClassUtils.getSimpleName(protocol.getClass()) +
                     " does not support streaming output");
        }
    }

    public void write(byte b[]) throws IOException
    {
        assertStreamOk();
        protocol.write(os, b);
    }

    public void write(byte b[], int off, int len) throws IOException
    {
        assertStreamOk();
        byte[] buffer = new byte[len];
        System.arraycopy(b, off, buffer, 0, len);
        protocol.write(os, buffer);
    }

    public void flush() throws IOException
    {
        assertStreamOk();
        os.flush();
    }

    public void write(int b) throws IOException
    {
        write(new byte[]{(byte) b});
    }

    public void close() throws IOException
    {
        assertStreamOk();
        os.close();
    }

}